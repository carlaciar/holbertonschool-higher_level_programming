# Test present: integer_validator()
# Test present: integer_validator("age")
# Test present: integer_validator("age", (4,))
# Test present: integer_validator("age", [3])
# Test present: integer_validator("age", True)

# Import the class
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

# Create an instance
>>> bg = BaseGeometry()

# area() should raise Exception
>>> bg.area()
Traceback (most recent call last):
...
Exception: area() is not implemented

# Valid integer validations (no output expected)
>>> bg.integer_validator("my_int", 12)
>>> bg.integer_validator("width", 89)

# MISSING ARGUMENTS
>>> bg.integer_validator()
Traceback (most recent call last):
...
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

>>> bg.integer_validator("age")
Traceback (most recent call last):
...
TypeError: integer_validator() missing 1 required positional argument: 'value'

# Invalid type: string instead of int
>>> bg.integer_validator("name", "John")
Traceback (most recent call last):
...
TypeError: name must be an integer

# Invalid type: tuple instead of int
>>> bg.integer_validator("age", (4,))
Traceback (most recent call last):
...
TypeError: age must be an integer

# Invalid type: list instead of int
>>> bg.integer_validator("age", [3])
Traceback (most recent call last):
...
TypeError: age must be an integer

# Bool is technically a subclass of int, so it should be accepted
>>> bg.integer_validator("age", True)

# Invalid value: zero
>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
...
ValueError: age must be greater than 0

# Invalid value: negative
>>> bg.integer_validator("distance", -4)
Traceback (most recent call last):
...
ValueError: distance must be greater than 0
